class Line {
	field int indent;
	field GrowableArray text;

	constructor Line new() {
		let indent = 0;
		let text = GrowableArray.new(10);
		return this;
	}

	method int getIndent() {
		return indent;
	}
	method void setIndent(int newIndent) {
		let indent = newIndent;
		return;
	}
	method void tab() {
		let indent = indent + 1;
		return;
	}
	method void untab() {
		if (indent = 0) { return; }
		let indent = indent - 1;
		return;
	}
	method int getLength() {
		return text.getLength();
	}
	method void addCharAt(char c, int index) {
		do text.addAt(c, index);
		return;
	}
	method char removeCharAt(int index) {
		return text.removeAt(index);
	}
	method char getCharAt(int index) {
		return text.get(index);
	}
	method void print(int cursorIndex, char cursorChar) {
		var int i;
		var int textLength;

		while (i < indent) {
			do Output.printChar(32);
			do Output.printChar(32);
			let i = i + 1;
		}
		let textLength = text.getLength();
		let i = 0;
		while (i < textLength) {
			if (i = cursorIndex) {
				do Output.printChar(cursorChar);
			}
			do Output.printChar(text.get(i));
			let i = i + 1;
		}
		if (i = cursorIndex) {
			do Output.printChar(cursorChar);
		}
		do Output.println();
		return;
	}
	method int getColumnForIndex(int index) {
		return (2 * indent) + index;
	}
	method int getIndexForColumn(int column) {
		var int index;
		var int textLength;
		let index = column - (2 * indent);
		if (index < 0) { return 0; }
		let textLength = text.getLength();
		if (index > textLength) { return textLength; }
		return index;
	}
	method void dispose() {
		do text.dispose();
		do Memory.deAlloc(this);
		return;
	}
}